Exer - 23:
SELECT PRODID, PDESC, CATEGORY 
FROM Product 
WHERE UPPER(CATEGORY) = 'ELECTRONICS';

Exer - 24:
SELECT PRODID, SUBSTR(PDESC,1,5) AS PDESC_FIVE, CATEGORY 
FROM Product;

Exer - 25:
SELECT COUNT(*) AS SALE_COUNT 
FROM Sale 
WHERE MONTHS_BETWEEN(SYSDATE, SLDATE) <= 60;

Exer - 26:
SELECT NVL(PDESC, 'No Description') AS PDESC, DISCOUNT 
FROM Product;

Exer - 27:
SELECT PRODID, CATEGORY, PRICE, DISCOUNT 
FROM Product 
ORDER BY CATEGORY DESC, PRICE;

Exer - 28:
SELECT PRODID, CATEGORY, DISCOUNT 
FROM Product 
WHERE CATEGORY IN ('Sports', 'Apparel') 
ORDER BY CATEGORY, DISCOUNT;

Exer - 29:
SELECT TO_CHAR(SLDATE, 'Month') AS MONTH, COUNT(*) AS NUMBER_SALE 
FROM Sale 
GROUP BY TO_CHAR(SLDATE, 'Month') 
ORDER BY COUNT(*) DESC;

Exer - 30:
SELECT PRODID, SUM(QUANTITY) QTY_SOLD 
FROM SALEDETAIL 
WHERE QUANTITY>1 
GROUP BY PRODID 
HAVING COUNT(QUANTITY)>1;

Exer - 31:
SELECT PRODID, PDESC, PRICE AS "Old_Price", ROUND(PRICE*0.775, 2) AS "New_Price" 
FROM Product 
WHERE CATEGORY = 'Sports'; 

Exer - 32:
SELECT SALEID, ROUND(MONTHS_BETWEEN(SYSDATE,SLDATE),1) AS "MONTH_AGED" 
FROM Sale;

Exer - 33:
SELECT ROUND(AVG(PRICE), 2) "Avg", MIN(PRICE) "Min", MAX(PRICE) "Max", COUNT(PRODID) "Total" 
FROM Product;

Exer - 34:
SELECT CONCAT(CONCAT(SNAME, ' is from '), LOCATION) AS RESULT 
FROM SalesMan;

Exer - 35:
SELECT TO_CHAR(TO_DATE('Jan/10/2015', 'MON/DD/YYYY'), 'Month') MONTH, TO_NUMBER('2,50,000', '9,99,999') AMOUNT 
FROM DUAL;

Exer - 36:
SELECT PRODID, PDESC, PRICE 
FROM Product 
ORDER BY PRICE DESC, PRODID DESC;

Exer - 37:
SELECT PRODID, PDESC, PRICE 
FROM Product 
ORDER BY PDESC;

Exer - 38:
SELECT LOCATION, COUNT(*) AS NUMBER_SMAN 
FROM Salesman 
GROUP BY LOCATION;

Exer - 39:
SELECT CATEGORY 
FROM Product 
GROUP BY CATEGORY 
HAVING COUNT(*) > 1;

-------------------------------------------------------------------------------------------------------------------------------------

Assignment - 40:
SELECT DISTINCT ITEMTYPE,
CASE 
  WHEN PRICE BETWEEN 0 AND 499 THEN 'Cheap'
  WHEN PRICE BETWEEN 500 AND 1999 THEN 'Affordable'
  WHEN PRICE BETWEEN 2000 AND 4999 THEN 'Expensive'
  ELSE 'Very Expensive'
END AS CLASSIFICATION
FROM Item
ORDER BY ITEMTYPE;

Assignment - 41:
SELECT TO_CHAR(QDate, 'Month') AS MONTH, COUNT(*) AS QUOTATIONCOUNT 
FROM Quotation 
GROUP BY TO_CHAR(QDate, 'Month');

Assignment - 42:
SELECT ORDERID, ROUND(MONTHS_BETWEEN(PYMTDATE, ORDERDATE),2) AS "No of Months" 
FROM ORDERS 
WHERE ROUND(MONTHS_BETWEEN(PYMTDATE, ORDERDATE),2) > 0.1 AND STATUS = 'Delivered';

Assignment - 43:
SELECT EMPID, SALARY AS "Current Salary", SALARY*1.20 AS "New Salary", ROUND(SALARY*0.20, 2) AS "Incremented Amount"
FROM EmpDetails
WHERE DESIGNATION = 'Manager';

Assignment - 44:
SELECT ITEMCODE 
FROM Item 
WHERE ABS(ReorderLevel-QtyOnHand) > 50;

Assignment - 45:
SELECT ITEMCODE, AVG(QTYAVAILABLE) AS "Average Quantity"
FROM RetailStock
GROUP BY ITEMCODE
HAVING AVG(QTYAVAILABLE) < 75;

Assignment - 46:
SELECT PYMTMODE, COUNT(*) PYMTCOUNT 
FROM ORDERS 
WHERE TO_CHAR(PYMTDATE, 'YYYY')<'2015' 
GROUP BY PYMTMODE 
HAVING COUNT(*) > 1;

Assignment - 47:
SELECT SNAME, AVG(QUOTEDPRICE) AS "Average quoted price"
FROM Quotation 
WHERE QStatus = 'Closed'
GROUP BY SNAME
HAVING AVG(QUOTEDPRICE) > 500;

Assignment - 48:
SELECT ITEMTYPE, CATEGORY, ROUND(AVG(PRICE), 2) AS "Average item price"
FROM Item
WHERE ITEMTYPE IN ('FMCG', 'Computer')
GROUP BY ITEMTYPE, CATEGORY
HAVING AVG(PRICE) < 2000;

Assignment - 49:
SELECT JOB, AVG(SAL) AS "Average Salary" 
FROM Emp 
WHERE JOB IN ('MANAGER', 'ANALYST')
GROUP BY JOB
HAVING AVG(SAL) > 1500;

Assignment - 50:
SELECT JOB, DEPTNO, AVG(SAL) AS AVGSALARY 
FROM Emp 
WHERE DEPTNO IN (10, 20) AND SAL > 2000
GROUP BY JOB, DEPTNO
HAVING AVG(SAL) > 2500;

Assignment - 51:
SELECT EMPID, EMPNAME, SALARY,
CASE DESIGNATION
  WHEN 'Administrator' THEN SALARY*1.10
  WHEN 'Manager' THEN SALARY*1.05
  WHEN 'Billing Staff' THEN SALARY*1.20
  WHEN 'Security' THEN SALARY*1.25
  ELSE SALARY*1.02
END AS INCREASEDSALARY
FROM EmpDetails;

Assignment - 52:
SELECT EMPID, SALARY,
CASE
  WHEN SALARY < 2500 THEN 'Class 3'
  WHEN SALARY BETWEEN 2500 AND 5000 THEN 'Class 2'
  WHEN SALARY > 2500 THEN 'Class 1'
END AS SALGRADE
FROM EmpDetails;

Assignment - 53:
SELECT ITEMCODE, PRICE AS "Old Price", ROUND(PRICE*0.745, 2) AS "New Price"
FROM Item
WHERE ITEMTYPE = 'FMCG';

Assignment - 54:
SELECT EMPID, EMPNAME, WORKSIN 
FROM EmpDetails
WHERE DESIGNATION IN ('Billing Staff', 'Retail Outlet');

Assignment - 55:
SELECT ORDERID, STATUS, NVL(PYMTMODE, 'Payment yet not done') AS PYMTMODE
FROM Orders;

Assignment - 56:
SELECT DESCR 
FROM Item
WHERE LENGTH(DESCR) > 15;

Assignment - 57:
SELECT SUBSTR(ROID, 2) AS NUMERICROID
FROM RetailStock
GROUP BY ROID;

Assignment - 58:
SELECT TO_CHAR(SYSDATE,'Mon/dd/yyyy Day') AS CURRENTDATE 
FROM DUAL;

Assignment - 59:
SELECT COUNT(ORDERID) AS TOTALORDERCOUNT, COUNT(PYMTMODE) AS PAIDORDERSCOUNT               
FROM Orders;

Assignment - 60:
SELECT ORDERID, ABS(ORDERDATE-PYMTDATE) AS NOOFDAYS
FROM Orders;

Assignment - 61:
SELECT COUNT(DISTINCT ItemType) NOOFITEMTYPES
FROM Item;

Assignment - 62:
SELECT MAX(SALARY) MAXSAL, MIN(SALARY) MINSAL, SUM(SALARY) TOTALSAL, AVG(SALARY) AVGSAL
FROM EmpDetails;

Assignment - 63:
SELECT SNAME, AVG(QUOTEDPRICE) AS "Average quoted price"
FROM Quotation 
WHERE QUOTEDPRICE > 1000 AND QSTATUS = 'Closed'
GROUP BY SNAME
HAVING AVG(QUOTEDPRICE) < 4500;

Assignment - 64:
SELECT COUNT(ITEMCODE) AS NOOFITEMS
FROM Item;

Assignment - 65:
SELECT ORDERID, MONTHS_BETWEEN(ORDERDATE, PYMTDATE) AS "No of Months"
FROM Orders;

Assignment - 66:
SELECT SUM(QUOTEDPRICE) AS TOTALPRICE
FROM Quotation
WHERE TO_CHAR(QDATE, 'Mon') = 'Jun' AND QSTATUS = 'Accepted';
