Exer - 40:
SELECT * 
FROM Salesman 
WHERE SNAME LIKE '%e%' AND LOCATION LIKE '%o%'
UNION 
SELECT * 
FROM Salesman 
WHERE SNAME LIKE '%a%' AND LOCATION LIKE '%a%';

Exer - 41:
SELECT PRODID, PDESC, CATEGORY, DISCOUNT
FROM Product
WHERE DISCOUNT < 10
UNION ALL
SELECT PRODID, PDESC, CATEGORY, DISCOUNT
FROM Product
WHERE CATEGORY = 'Sports';

Exer - 42:
SELECT PRODID, PDESC, CATEGORY, DISCOUNT
FROM Product
WHERE DISCOUNT < 10
UNION 
SELECT PRODID, PDESC, CATEGORY, DISCOUNT 
FROM Product
WHERE CATEGORY = 'Sports';

Exer - 43:
SELECT 'S' TYPE , SID ID, SNAME DETAILS 
FROM Salesman
UNION ALL
SELECT 'P' TYPE , PRODID ID, CATEGORY DETAILS 
FROM Product;

Exer - 44:
SELECT Id, EName, Dept, E.CompId, Make
FROM Employee E INNER JOIN Computer C ON E.CompId = C.CompId;

Exer - 45:
SELECT Id, EName, E.CompId, Make
FROM Employee E INNER JOIN Computer C ON E.CompId = C.CompId AND Model IN ('Precision', 'Edge');

Exer - 46:
SELECT E.Dept, COUNT(E.COMPID) AS "NUMBER OF COMPUTERS"
FROM Employee E INNER JOIN Computer C ON E.COMPID = C.COMPID AND MAKE = 'Dell'
GROUP BY DEPT;

Exer - 47:
SELECT S.SALEID, S.SLDATE
FROM Sale S INNER JOIN Salesman SM ON SM.SID = S.SID AND SM.LOCATION = 'London';

Exer - 48:
SELECT S1.SID, S1.SNAME, S1.LOCATION
FROM Salesman S1 INNER JOIN Salesman S2 ON S1.LOCATION = S2.LOCATION AND S1.SID <> S2.SID;

Exer - 49:
SELECT S1.SNAME, S2.SALEID
FROM Salesman S1 LEFT JOIN Sale S2 ON S1.SID = S2.SID;

Exer - 50:
SELECT SM.SID, SM.SNAME, SUM(P.PRICE * SD.QUANTITY) AS TAMOUNT, SUM((P.PRICE * SD.QUANTITY) * P.DISCOUNT/100) AS TDISCOUNT
FROM Salesman SM INNER JOIN Sale S ON SM.SID = S.SID
     INNER JOIN SaleDetail SD ON S.SALEID = SD.SALEID
         INNER JOIN Product P ON P.PRODID = SD.PRODID
GROUP BY SM.SID, SM.SNAME
ORDER BY TAMOUNT DESC, TDISCOUNT DESC;

Exer - 51:
SELECT S.SALEID, P.PRODID, SM.SID, SM.SNAME
FROM Salesman SM INNER JOIN Sale S ON SM.SID = S.SID
     INNER JOIN SaleDetail SD ON S.SALEID = SD.SALEID
         INNER JOIN Product P ON P.PRODID = SD.PRODID;

Exre - 52:
SELECT SM.SID, SM.SNAME, NVL(SUM(P.PRICE * SD.QUANTITY), 0) AS TAMOUNT, NVL(SUM((P.PRICE * SD.QUANTITY) * P.DISCOUNT/100), 0) AS TDISCOUNT
FROM Salesman SM LEFT JOIN Sale S ON SM.SID = S.SID
     LEFT JOIN SaleDetail SD ON S.SALEID = SD.SALEID
         LEFT JOIN Product P ON P.PRODID = SD.PRODID
GROUP BY SM.SID, SM.SNAME;

Exer - 53:
SELECT SM.LOCATION, P.CATEGORY, SUM(SD.QUANTITY) AS "Total Quantity"
FROM Salesman SM INNER JOIN Sale S ON SM.SID = S.SID
     INNER JOIN SaleDetail SD ON S.SALEID = SD.SALEID
         INNER JOIN Product P ON P.PRODID = SD.PRODID
GROUP BY SM.LOCATION, P.CATEGORY;

Exer - 54:
SELECT E.ENAME, E.DEPT, NVL(C.MODEL, 'Not allocated') AS MODEL
FROM Employee E LEFT JOIN Computer C ON E.COMPID = C.COMPID;

Exer - 55:
SELECT E.ID, E.ENAME, E.DEPT, C.MODEL
FROM Employee E FULL JOIN Computer C ON E.COMPID = C.COMPID;

Exer - 56:
SELECT E.ID, E.ENAME, E.MANAGER AS MGRID, E2.ENAME AS MGRNAME, C.MODEL AS E_MODEL, C2.MODEL AS M_MODEL
FROM Employee E INNER JOIN Computer C ON E.COMPID = C.COMPID
     INNER JOIN Employee E2 ON E2.ID = E.MANAGER
          INNER JOIN Computer C2 ON C2.COMPID = E2.COMPID;

Exer - 57:
SELECT SM.SID, SM.SNAME
FROM Salesman SM LEFT JOIN Sale S ON SM.SID = S.SID
WHERE S.SALEID IS NULL;

Exer - 58:
SELECT DISTINCT P1.PRODID, P1.CATEGORY, P1.PRICE
FROM Product P1 INNER JOIN Product P2 ON P1.PRICE = P2.PRICE AND P1.PRODID <> P2.PRODID;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Assignment - 67:
SELECT E.ENAME, E.SAL, D.DNAME
FROM EMP E INNER JOIN DEPT D ON E.DEPTNO = D.DEPTNO AND E.SAL > 2000;

Assignment - 68:
SELECT E.ENAME, D.DNAME
FROM EMP E INNER JOIN DEPT D ON E.DEPTNO = D.DEPTNO AND JOB = 'MANAGER';

Assignment - 69:
SELECT D.DNAME
FROM EMP E INNER JOIN DEPT D ON D.DEPTNO = E.DEPTNO AND SAL>1500 
GROUP BY D.DNAME 
HAVING COUNT(*) > 1

Assignment - 70:
SELECT E.ENAME, V.VEHICLENAME
FROM Emp E LEFT JOIN EmpVehicle EV ON E.EMPNO = EV.EMPNO
     LEFT JOIN Vehicle V ON V.VEHICLEID = EV.VEHICLEID;

Assignment - 71:
SELECT I.ITEMCODE,I.DESCR, Q.SNAME
FROM ITEM I INNER JOIN QUOTATION Q ON I.ITEMCODE = Q.ITEMCODE;

Assignment - 72:
SELECT C.CUSTID AS "Customer Id", C.CUSTNAME AS "Customer Name"
FROM Customer C INNER JOIN EmpDetails E ON C.EMAILID = E.EMAILID AND C.CUSTNAME = E.EMPNAME;

Assignment - 73:
SELECT I.ITEMCODE, I.DESCR, I.CATEGORY, Q.QUOTEDPRICE
FROM Item I INNER JOIN Quotation Q ON I.ITEMCODE = Q.ITEMCODE AND Q.QSTATUS = 'Accepted';

Assignment - 74:
SELECT R.ROID, I.DESCR, I.ITEMTYPE, RS.UNITPRICE
FROM RetailOutlet R INNER JOIN RetailStock RS ON R.ROID = RS.ROID
     INNER JOIN ITEM I ON RS.ITEMCODE = I.ITEMCODE AND RS.UNITPRICE > 1500;

Assignment - 75:
SELECT Q.ITEMCODE, Q.SNAME, SUM(O.QTYORDERED) AS TOTALQUANTITY
FROM Orders O INNER JOIN Quotation Q ON O.QUOTATIONID = Q.QUOTATIONID
GROUP BY Q.ITEMCODE, Q.SNAME
HAVING SUM(QTYORDERED) > 100;

Assignment - 76:
SELECT I.ITEMCODE, I.DESCR
FROM Item I INNER JOIN Quotation Q ON I.PRICE = Q.QUOTEDPRICE
GROUP BY I.ITEMCODE, I.DESCR
HAVING COUNT(*) > 1;

Assignment - 77:
SELECT Q.SNAME, Q.QUOTATIONID 
FROM Quotation Q INNER JOIN Orders O ON O.QUOTATIONID = Q.QUOTATIONID AND DELIVEREDDATE - ORDERDATE <= 5;

Assignment - 78:
SELECT NVL(E.EMPNAME, 'No Manager') AS EMPNAME, I.CATEGORY, SUM(RS.QTYAVAILABLE) AS TOTALQUANTITY 
FROM RetailOutlet RO INNER JOIN RetailStock RS ON RO.ROID = RS.ROID
    LEFT JOIN EmpDetails E ON E.EMPID = RO.MANAGERID
         INNER JOIN ITEM I ON RS.ITEMCODE = I.ITEMCODE
GROUP BY E.EMPNAME, I.CATEGORY;

Assignment - 79:
SELECT RO.LOCATION, C.CUSTTYPE, SUM(P.QUANTITY) TOTALQUANTITY
FROM RETAILOUTLET RO, PURCHASEBILL P, CUSTOMER C, ITEM I
WHERE RO.ROID = P.ROID 
AND C.CUSTID = P.CUSTID 
AND I.ITEMCODE = P.ITEMCODE
AND C.GENDER = 'M'
AND I.ITEMTYPE IN ('Apparels','Computer')
GROUP BY RO.LOCATION, C.CUSTTYPE

Assignment - 80:
SELECT I.ITEMCODE, I.DESCR, NVL(P.BILLAMOUNT, 0) AS BILLAMOUNT, NVL(C.CUSTID, 0) AS CUSTID                                                                                       ERROR
FROM Item I INNER JOIN PurchaseBill P ON P.ITEMCODE = I.ITEMCODE AND I.ITEMTYPE = 'FMCG'                                                                                                  -----------
     LEFT JOIN Customer C ON C.CUSTID = P.CUSTID;

Assignment - 81:
SELECT I.ITEMCODE, I.DESCR, NVL(TO_CHAR(RS.QTYAVAILABLE), 'N.A.') AS QTYAVAILABLE
FROM Item I LEFT JOIN RetailStock RS ON I.ITEMCODE = RS.ITEMCODE AND RS.ROID = 'R1001';

Assignment - 82:
SELECT E.EMPID, E.EMPNAME, RO.ROID, RO.LOCATION
FROM EmpDetails E RIGHT JOIN RetailOutlet RO ON E.WORKSIN = RO.ROID;

Assignment - 83:
SELECT E1.EMPNAME, E1.DESIGNATION, E1.EMAILID
FROM EmpDetails E1 INNER JOIN EmpDetails E2 ON E1.WORKSIN = E2.WORKSIN AND E2.EMPNAME = 'George' AND E1.EMPNAME <> 'George';

Assignment - 84:
SELECT C1.CUSTID, C1.CUSTNAME
FROM Customer C1 INNER JOIN Customer C2
ON C1.CUSTID <> C2.CUSTID
WHERE C1.ADDRESS = C2.ADDRESS
ORDER BY C1.ADDRESS;

Assignment - 85:
SELECT C.CUSTNAME, P.BILLAMOUNT
FROM Customer C INNER JOIN PurchaseBill P ON P.CUSTID = C.CUSTID AND P.BILLAMOUNT > 5000;

Assignment - 86:
SELECT RO.ROID, COUNT(I.ITEMCODE) AS "Number of items"
FROM RetailOutlet RO INNER JOIN RetailStock RS ON RO.ROID = RS.ROID
     INNER JOIN Item I ON I.ITEMCODE = RS.ITEMCODE
GROUP BY RO.ROID;  

Assignment - 87:
SELECT I.ITEMCODE, I.DESCR, RO.LOCATION, RS.QTYAVAILABLE
FROM Item I, RetailOutlet RO, RetailStock RS
WHERE I.ITEMCODE = RS.ITEMCODE AND RS.ROID = RO.ROID AND I.ITEMTYPE = 'Apparels';

Assignment - 88:
SELECT I.ITEMCODE, I.DESCR, NVL(Q.QUOTATIONID, 'No quotation received') AS QUOTATIONID
FROM Item I LEFT JOIN Quotation Q ON I.ITEMCODE = Q.ITEMCODE;

Assignment - 89:
SELECT I.ITEMCODE, I.DESCR, RS.ROID, RS.QTYAVAILABLE
FROM Item I INNER JOIN RetailStock RS ON I.ITEMCODE = RS.ITEMCODE;

Assignment - 90:
SELECT I.DESCR, I.ITEMTYPE, P.BILLAMOUNT
FROM Item I INNER JOIN PurchaseBill P ON I.ITEMCODE = P.ITEMCODE AND P.ROID = 'R1001';

Assignment - 91:
SELECT C1.CUSTID, C1.CUSTNAME, C1.CUSTTYPE
FROM Customer C1 INNER JOIN Customer C2 ON C1.CUSTID = C2.CUSTID AND C2.CUSTTYPE = (SELECT CUSTTYPE FROM CUSTOMER WHERE CUSTID = 2004) AND C1.CUSTID <> 2004;

Assignment - 92:
SELECT I.ITEMTYPE, I.DESCR, NVL(Q.QUOTATIONID, 'No quotation received') AS "Available Quotation number"
FROM Item I LEFT JOIN Quotation Q ON I.ITEMCODE = Q.ITEMCODE 
WHERE I.ITEMTYPE IN ('Computer', 'FMCG');
